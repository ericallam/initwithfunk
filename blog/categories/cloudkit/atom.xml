<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CloudKit | initWithFunk:]]></title>
  <link href="http://initwithfunk.com/blog/categories/cloudkit/atom.xml" rel="self"/>
  <link href="http://initwithfunk.com/"/>
  <updated>2015-07-24T08:55:46+01:00</updated>
  <id>http://initwithfunk.com/</id>
  <author>
    <name><![CDATA[Eric Allam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[As I Learn CloudKit Syncing - Part 5: Tracking Game Changes]]></title>
    <link href="http://initwithfunk.com/blog/2015/07/08/as-i-learn-cloudkit-syncing-part-5-tracking-game-changes/"/>
    <updated>2015-07-08T14:08:00+01:00</updated>
    <id>http://initwithfunk.com/blog/2015/07/08/as-i-learn-cloudkit-syncing-part-5-tracking-game-changes</id>
    <content type="html"><![CDATA[<p><em>This is part 5 in a <a href="http://initwithfunk.com/blog/categories/ailcks/">series of posts</a> talking through how I built CloudKit syncing into Qiktionary</em></p>

<p>In the <a href="http://initwithfunk.com/blog/2015/07/07/as-i-learn-cloudkit-syncing-part-4-tracking-local-changes/">last installment</a> of this series I discussed how I was tracking newly created games.</p>

<p>Tracking changes to a game that has already been synced with CloudKit has to be approached in a different way.</p>

<p>The first approach I thought about using was based on time. I would track the &ldquo;last updated&rdquo; times of all the games and also track the last sync time. Then I could just query for all games with a more recent &ldquo;last updated&rdquo; value.</p>

<p>I decided against that approach for a couple of reasons. I was worried I wouldn&rsquo;t be able to correctly track the last synced date when things went wrong with a sync, thus possibly letting some game updates slip through the cracks. And I also wanted to be a good CloudKit citizen and only send values that had actually changed since the last sync, and not the entire game every time there was a change.</p>

<h3>The approach I&rsquo;m using</h3>

<p>I decided to create a table called GameChange that stores the <code>gameID</code> and a set of <code>changedFields</code> that correspond to column names on the Game table. When a game is updated I create a GameChange record with the set of fields that have changed on the game. If there is already a GameChange record for that game, I update the GameChange&rsquo;s <code>changedFields</code> value with any new fields that have changed on that game.</p>

<p>This makes it really easy to know what games have changed, all I have to do is <code>SELECT * FROM GameChange</code>. Then, after those changes have been sent to CloudKit using the <code>CKModifyRecordsOperation</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, I can just delete the GameChange record.</p>

<h3>Don&rsquo;t track changes that don&rsquo;t need to be synced</h3>

<p>It took me a bit to really figure this out but it may seem pretty obvious to you: only track changes to a game that need to be sent to CloudKit. For example, I ignore changes when:</p>

<ul>
<li>Updating the <code>remoteRecordID</code> field.</li>
<li>Updating a game with new data that was fetched from CloudKit.</li>
</ul>


<p> I do this by having two different &ldquo;save&rdquo; methods on my Game class, <code>save</code> and <code>saveWithoutTrackingChanges</code>. The <code>save</code> method is inherited from <code>FCModel</code>, and it looks a bit like this:</p>

<p>```objc
&ndash; (BOOL)save
{</p>

<pre><code>NSArray *changedFieldNames = [self changedFieldNamesWithoutRemoteColumns];

BOOL existsInDB = self.existsInDatabase;
BOOL generateChanges = !self.stopSaveChangeGeneration;

BOOL saved = [super save];

if (saved &amp;&amp; generateChanges &amp;&amp; existsInDB) {

    BOOL hasChanges = changedFieldNames.count &gt; 0;

    if (hasChanges) {
        [GameChange saveChangeForGame:self withChangedFields:changedFieldNames];
    }

    return saved;

}else{
    return saved;
}
</code></pre>

<p>}
```</p>

<p>Note the call to <code>changedFieldNamesWithoutRemoteColumns</code> which returns an array of field names that have changed on the game record, filtering out the <code>remoteRecordID</code> column that we don&rsquo;t need to sync with iCloud.</p>

<p>saveWithoutTrackingChanges just sets the stopSaveChangeGeneration flag around a call to <code>save</code>:</p>

<p>```objc
&ndash; (BOOL)saveWithoutTrackingChanges
{</p>

<pre><code>self.stopSaveChangeGeneration = YES;

BOOL result = [self save];

self.stopSaveChangeGeneration = NO;

return result;
</code></pre>

<p>}
```</p>

<p>The other important piece here is the call to <code>[GameChange saveChangeForGame:self withChangedFields:changedFieldNames]</code>, which is implemented like so:</p>

<p>```objc
+ (instancetype)saveChangeForGame:(Game <em>)game withChangedFields:(NSArray </em>)changedFields;
{</p>

<pre><code>GameChange *gameChange = [GameChange firstInstanceWhere:@"gameID = ?", game.gameID];

if (!gameChange) {
    gameChange = [GameChange new];
    gameChange.gameID = game.gameID;
    gameChange.changedFields = [NSSet setWithArray:changedFields];
}else{
    NSSet *existingChangedFields = gameChange.changedFields;
    NSMutableSet *mutableChangedFields = [NSMutableSet setWithSet:existingChangedFields];
    [mutableChangedFields addObjectsFromArray:changedFields];
    gameChange.changedFields = mutableChangedFields.copy;
}

if ([gameChange save]) {
    return gameChange;
}else{
    return nil;
}
</code></pre>

<p>}
```</p>

<h3>Bonus: tracking game deletions</h3>

<p>I take a similar approach to tracking when a local game is deleted. I have a GameDeletion table that stores the <code>CKRecordID</code> of any game that has been deleted (and has already been synced to iCloud). I don&rsquo;t keep the local Game record in the database either (with something like a <code>deleted</code> BOOL to mark it as deleted). The Game record is really deleted from the database, along with it&rsquo;s corresponding RemoteRecord entry.</p>

<p>When I&rsquo;m setting up my <code>CKModifyRecordsOperation</code>, all I have to do is <code>SELECT * FROM GameDeletion</code>. Then after the operation succeeds, I can delete the GameDeletion record.</p>

<h3>Tracking complete</h3>

<p>If you recall the syncing recipe is as follows:</p>

<ol>
<li> Track local changes</li>
<li> Send changes to the server</li>
<li> Resolve conflicts</li>
<li> Fetch server changes with <code>CKFetchRecordChangesOperation</code></li>
<li> Apply server changes</li>
<li> Save server change token</li>
</ol>


<p>Now that I&rsquo;ve tracked all the local changes I need to track, it&rsquo;ll finally be time to start sending those changes to the server. That I will start covering in my next post.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I&rsquo;ll eventually get to how I&rsquo;m using the <code>CKModifyRecordsOperation</code> to send all these local changes to CloudKit.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[As I Learn CloudKit Syncing - Part 4: Tracking Local Changes]]></title>
    <link href="http://initwithfunk.com/blog/2015/07/07/as-i-learn-cloudkit-syncing-part-4-tracking-local-changes/"/>
    <updated>2015-07-07T09:20:00+01:00</updated>
    <id>http://initwithfunk.com/blog/2015/07/07/as-i-learn-cloudkit-syncing-part-4-tracking-local-changes</id>
    <content type="html"><![CDATA[<p>I&rsquo;m syncing games. Game data can change in three ways: A new game, a change to an existing game, and a deleted game. All three are tracked differently.</p>

<h3>Tracking new games</h3>

<p>I can know if a game is new based on whether it is already linked to a CKRecord. According to the docs, the way you link local data to a CKRecord is through encoding the CKRecord&rsquo;s metadata with the <code>-encodeSystemFieldsWithCoder</code> method on <code>CKRecord</code>.</p>

<p>At first I was saving the encoded metadata along with the game data in the Game table. It was a BLOB column<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> called <code>remoteRecord</code>. <code>FCModel</code> will store BLOB data as an instance of NSData. Here is how I turned the CKRecord into NSData to store in the Game table:</p>

<p>```objc
NSMutableData <em>data = [NSMutableData data];
NSKeyedArchiver </em>archiver = [[NSKeyedArchiver alloc] initForWritingWithMutableData:data];</p>

<p>[instanceValue encodeSystemFieldsWithCoder:archiver];</p>

<p>[archiver finishEncoding];</p>

<p>NSData *remoteRecordData = [NSData dataWithData:data];
```</p>

<p>And here is how I converted it back from an instance of NSData to a CKRecord:</p>

<p><code>objc
NSData *data = (NSData *)databaseValue;
NSKeyedUnarchiver *coder = [[NSKeyedUnarchiver alloc] initForReadingWithData:data];
CKRecord *record = [[CKRecord alloc] initWithCoder:coder];
[coder finishDecoding];
</code></p>

<p>This worked well until I implemented the &ldquo;Fetch server changes with CKFetchRecordChangesOperation&rdquo; step of the CloudKit Syncing recipe<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<p>In this step, at some point I need to query the Game table and lookup a specific game, and all I have is a <code>CKRecord</code> instance. I can&rsquo;t search the <code>remoteRecord</code> BLOB column for the CKRecord because it&rsquo;s been encoded into a bag of bytes.</p>

<p>I also can&rsquo;t query the Game table by the gameID (that&rsquo;s the Game table&rsquo;s primary key column) which is stored in the <code>CKRecord</code>. Even though the gameID is one of the Game properties I&rsquo;m saving on the CKRecord. Why?</p>

<p>It has to do with how <code>CKFetchRecordChangesOperation</code> works<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. As its name implies, it only pulls in <em>changes</em>. So for example if a game&rsquo;s record on iCloud has its <code>guesses</code> value changed, then the <code>CKRecord</code> returned by <code>CKFetchRecordChangesOperation</code> will only include the new value for <code>guesses</code> but not any of the other values on that <code>CKRecord</code>.</p>

<p>So the way I&rsquo;ve worked around this is to create a new table called <code>RemoteRecord</code> that has two fields, a <code>remoteRecordID</code> and a <code>remoteRecord</code>.  Now the <code>CKRecord</code> instance is encoded into the <code>remoteRecord</code> column of <code>RemoteRecord</code>, and the local Game table has a <code>remoteRecordID</code> foreign key relationship to the RemoteRecord table.</p>

<p>The thing that makes it possible to query a local Game from a CKRecord is what I&rsquo;m using as the <code>remoteRecordID</code>. Every CKRecord has a CKRecordID associated with it, and that CKRecordID has a property called <code>recordName</code> which is a string identifier that doesn&rsquo;t exceed 255 characters. By using the <code>recordName</code> as the value of the <code>remoteRecordID</code>, I can now easily lookup a local Game from a CKRecord, kind of like this:</p>

<p>```objc
NSString *recordName = record.recordID.recordName;</p>

<p>Game *existingGame = [Game firstInstanceWhere:@&ldquo;remoteRecordID = ?&rdquo;, recordName];
```</p>

<p>I did consider just putting the <code>remoteRecordID</code> column on the Game table and not creating the RemoteRecord table at all, but storing the CKRecord in a seperate table from Game made some things easier when tracking changes to a local game.</p>

<p>So to bring this back around to how I&rsquo;m tracking new local games, with this setup, all I have to do is query for Games that don&rsquo;t have a remoteRecordID set, like this:</p>

<p><code>objc
NSArray *newLocalGames = [Game instancesWhere:@"remoteRecordID IS NULL"];
</code></p>

<p>In the next installment I&rsquo;m going to cover how I&rsquo;m tracking local changes to existing games.</p>

<p>Get notified of new posts by <a href="http://twitter.com/eallam">following me on Twitter</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I&rsquo;m using SQLite for my local database, wrapped by FMDB and FCModel<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>As a reminder about what that recipe is, read <a href="http://initwithfunk.com/blog/2015/06/26/as-i-learn-cloudkit-syncing-part-1/">Part 1</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Definitely going to be digging into this more later.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[As I Learn CloudKit Syncing - Part 3: Operational Approach]]></title>
    <link href="http://initwithfunk.com/blog/2015/07/02/as-i-learn-cloudkit-syncing-part-3-operational/"/>
    <updated>2015-07-02T09:17:00+01:00</updated>
    <id>http://initwithfunk.com/blog/2015/07/02/as-i-learn-cloudkit-syncing-part-3-operational</id>
    <content type="html"><![CDATA[<p>There are two sides to the CloudKit API: convienence and operations. The convienence API is there to quickly get up and running with CRUD, meant to work on single items like saving a <code>CKRecord</code> or fetching one. Even though the convienence API can make it easy to get started quickly, it can get messy:</p>

<p><img src='http://f.cl.ly/items/3z2Z0S3o2A25203x3S3k/Screen%20Shot%202015-07-02%20at%209.38.33%20am.png' style="-webkit-box-shadow: 0 0 0px !important; box-shadow: 0 0 0px !important; -moz-box-shadow: 0 0 0px !important;" height="300px" /></p>

<p>Implementing CloudKit syncing using the &ldquo;Tiny Data, All Devices&rdquo; strategy as I <a href="http://initwithfunk.com/blog/2015/06/26/as-i-learn-cloudkit-syncing-part-1/">wrote earlier</a> necessitates the use of the other side of the CloudKit API: operations. More specifically, NSOperation and NSOperationQueue.</p>

<p>So in preperation for this feature, I did some homework. I read the <a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html">Concurrency Programming Guide</a>, the <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSOperation_class/">NSOperation</a> reference, and the <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSOperationQueue_class/">NSOperationQueue</a> reference.</p>

<p>I also watched <a href="https://developer.apple.com/videos/wwdc/2015/?id=226">Advanced NSOperations</a> talk from this years WWDC and my mind was opened to the power of NSOperation<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>If you haven&rsquo;t watched that talk yet, please stop reading now and watch it, and then <a href="https://developer.apple.com/sample-code/wwdc/2015/?q=Advanced%20Operations">download the sample code</a><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<h3>Advanced Operations and CKRecordZone</h3>

<p>The key part of the CloudKit service that makes this syncing solution possible is the use of a custom <a href="https://developer.apple.com/library/prerelease/ios/documentation/CloudKit/Reference/CKRecordZone_class/index.html">CKRecordZone</a>. A <code>CKRecordZone</code> object &ldquo;defines an area for organizing related records in a database&rdquo;. The public and private databases each have a default zone, and custom zones can be created as needed. Custom zones have two extra bits of functionality that are crucial for syncing: atomic commits and the ability to fetch only the changes that have occurred since the last fetch.</p>

<p>So I&rsquo;m going to need to create a <code>CKRecordZone</code> before I can sync the game data to that zone. But before I can create a <code>CKRecordZone</code> I need to make sure I have permission to access iCloud. I could use the convienence API:</p>

<p>```objc
[self.container accountStatusWithCompletionHandler:^(CKAccountStatus accountStatus, NSError *error) {</p>

<pre><code>if (accountStatus == CKAccountStatusAvailable) {

    CKRecordZone *newZone = [[CKRecordZone alloc] initWithZoneName:@"SyncZone"];

    [self.container.privateCloudDatabase saveRecordZone:newZone completionHandler:^(CKRecordZone *zone, NSError *zoneError) {

        if (!zoneError) {
            // Start syncing
        }

    }];
}
</code></pre>

<p>}];
```</p>

<p>This&hellip; smells. It works until things start going wrong and those errors stop being nil. Being able to gracefully recover from errors, as the CloudKit team has said, isn&rsquo;t the difference between a good app and a great app. It&rsquo;s the difference between a non-functioning app and a functioning one.</p>

<p>So I <em>think</em> I can do better. And that &ldquo;better&rdquo; comes from using the operation API and some of the techniques found in the Advanced NSOperations talk.</p>

<h3>Operation Dependencies</h3>

<p>An operation is a discrete unit-of-work. Using NSOperation dependencies, you can make sure an operation only performs work if another operation finishes successfully.</p>

<p>The high level dependency graph of the above code looks a bit like this:</p>

<pre class="chart">
 ┌────────────────┐ 
 │                │ 
 │ Account Status │ 
 │                │ 
 └────────────────┘ 
          ▲         
          │         
          │         
┌──────────────────┐
│                  │
│Create Record Zone│
│                  │
└──────────────────┘
          ▲         
          │         
          │         
 ┌────────────────┐ 
 │                │ 
 │      Sync      │ 
 │                │ 
 └────────────────┘ 
</pre>


<p>Sync will only execute if Create Record Zone is successful. Create Record Zone will only execute if the Account Status check is a success.</p>

<p>This smells better. In the Create Record Zone operation, if CloudKit returns an error, I&rsquo;ll have a chance to recover. For example, if I get back the <code>CKErrorRequestRateLimited</code> error, I can grab the <code>CKErrorRetryAfterKey</code> value from the error&rsquo;s userInfo dictionary and schedule an attempt to retry the operation. If the retry is successful, the Create Record Zone operation completes and the Sync operation is then executed.</p>

<p>So that&rsquo;s the high-level overview of my approach to building a gracefully recovering CloudKit syncing solution. In the next post I&rsquo;m going to cover more specifics of the implementation.</p>

<p>Be notified of new posts by <a href="http://twitter.com/eallam">following me on Twitter</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>And I&rsquo;m <a href="https://nickharris.wordpress.com/2015/06/22/nsoperation-my-story/">not the only one</a>   <a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>The first version of the sample code has a few bugs in it but <a href="https://forums.developer.apple.com/message/18766#18766">Dave DeLong is working on a fix</a>   <a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AILCKS - Part 2: Keeping Things Simple]]></title>
    <link href="http://initwithfunk.com/blog/2015/06/29/ailcks-part-2-keeping-things-simple/"/>
    <updated>2015-06-29T20:38:00+01:00</updated>
    <id>http://initwithfunk.com/blog/2015/06/29/ailcks-part-2-keeping-things-simple</id>
    <content type="html"><![CDATA[<p>I&rsquo;m building sync for a game called <a href="http://qiktionary.com">Qiktionary</a>, which is a simple (yet hard) word game. Discover the secret word by guessing other words and using deductive logic. Basically <a href="https://en.wikipedia.org/wiki/Mastermind_(board_game">Word Mastermind</a> except at the end of a game of Qiktionary you learn an interesting fact related to that word<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>So the data model is composed of stuff like words, games, guesses, etc. There is also word packs which is just a way for us to logically group words and provide progress in a more interesting way.  They look like this:</p>

<p><img src='http://f.cl.ly/items/3C0L3N0F0y170J1o1S1W/img_4272.png' style="-webkit-box-shadow: 0 0 0px !important; box-shadow: 0 0 0px !important; -moz-box-shadow: 0 0 0px !important;" /></p>

<p>All this data is stored locally on the device in a SQLite database. I&rsquo;m using <a href="https://github.com/marcoarment/FCModel">FCModel</a> to simplify the database access as I like the clean and small abstraction over <a href="https://github.com/ccgus/fmdb">FMDB</a>. The app ships with a seed database that includes all the word packs and words (and a few other things) that is copied on first launch. If that doesn&rsquo;t work the app also ships with a large plist file that has the word and word pack structured data and the app can import from the plist into the database if need be.</p>

<p>This basic setup works pretty well. As you can see, there is no server involved. Everything is stored locally.  When that above list of word packs need to be rendered there is no asynchronous network request to fetch the them, just a simple <code>SELECT * FROM WordPack</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<p>I like simple.</p>

<p>Introducing syncing makes this not so simple, which makes me nervous. CloudKit is supposed to be easy, but just because something is easy doesn&rsquo;t mean it can&rsquo;t <a href="http://www.infoq.com/presentations/Simple-Made-Easy">yield a good deal of complexity</a>.</p>

<p>So my goal is to try and keep the complexity to a minimum. To accomplish that I have to do the absolute bare amount of changes to the app as I can. That means I&rsquo;m only going to sync what I have to.</p>

<p>I could put the words and the word packs in the public iCloud database and use CloudKit to fetch them when needed, but that would change the assumption that the data is just a synchronous database-fetch away. There would be benefits to putting them in iCloud, like the ability to update them without an app release. Maybe in a later release.</p>

<p>I could also build out the Game Center leaderboard and achievement features<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> alongside sync but instead I&rsquo;m doing this CloudKit integration as its own release and so those features will have to wait until sync is implemented (and works reliably).</p>

<p>What I am going to do is:</p>

<ul>
<li>Push device Game data to iCloud.</li>
<li>Pull Game data from iCloud and put it on the device.</li>
<li>Associate Game data with a Game Center player</li>
</ul>


<p>Hopefully that is simple enough that even I can&rsquo;t screw it up.</p>

<p>Watch out for Part 3 where I&rsquo;m probably going to screw it up.</p>

<p>Be notified of new posts by <a href="http://twitter.com/eallam">following me on Twitter</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The facts are courtesy of the <a href="http://qi.com/people/elves">QI Elves</a>, a group of devishly smart people who write all the funny stuff on the <a href="http://qi.com">QI</a> show hosted by Stephen Fry. They also have a <a href="https://overcast.fm/itunes840986946/no-such-thing-as-a-fish">very funny podcast</a> that you should definitely check out. <a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Okay, it is a bit more complicated than that but still it&rsquo;s synchronous.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Remember from <a href="http://initwithfunk.com/blog/2015/06/26/as-i-learn-cloudkit-part-0/">Part 0</a> that leaderboards and achievements were the impetus to getting sync implemented in the first place <a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[As I Learn CloudKit Syncing - Part 1: Asking Questions]]></title>
    <link href="http://initwithfunk.com/blog/2015/06/26/as-i-learn-cloudkit-syncing-part-1/"/>
    <updated>2015-06-26T15:01:00+01:00</updated>
    <id>http://initwithfunk.com/blog/2015/06/26/as-i-learn-cloudkit-syncing-part-1</id>
    <content type="html"><![CDATA[<p>I described in <a href="http://initwithfunk.com/blog/2015/06/26/as-i-learn-cloudkit-part-0/">the first part</a> of this series, I&rsquo;m adopting the &ldquo;Little Data, Lots of Clients&rdquo; CloudKit syncing strategy for syncing <a href="http://twitter.com">Qiktionary</a> game data.</p>

<p><img src='http://f.cl.ly/items/0d0i1Z2h1S0L453y1E0C/LittleDataLotsOfClients.png' style="-webkit-box-shadow: 0 0 0px !important; box-shadow: 0 0 0px !important; -moz-box-shadow: 0 0 0px !important;" /></p>

<p>Both the <a href="https://developer.apple.com/videos/wwdc/2014/?id=231">Advanced CloudKit</a> talk from 2014 and the <a href="https://developer.apple.com/videos/wwdc/2015/?id=715">CloudKit Tips and Tricks</a> talk from this year cover how to use CloudKit in this way, but in a very high-level way:</p>

<ul>
<li>Use a custom <code>CKRecordZone</code> in the user&rsquo;s private database.</li>
<li>Custom zones support atomic modifications (only commit the changes if all changes can occur)</li>
<li>Custom zones also support fetching a &ldquo;diff&rdquo; of changes that have occurred since the last sync using the <code>CKFetchRecordChangesOperation</code> class</li>
<li>Custom zones allow you to create a <code>CKSubscription</code> that will notify clients of any changes to a zone, allowing the client to fetch the changes with the aforementioned <code>CKFetchRecordChangesOperation</code></li>
<li><code>CKRecord</code> has support for serializing only the metadata fields for storage alongside the local record using <code>- encodeSystemFieldsWithCoder:</code>.</li>
<li><code>CKRecord</code>&rsquo;s can be submitted back up to iCloud with just the metadata fields and fields that have changed. Which means you don&rsquo;t have to fetch an entire <code>CKRecord</code> before updating it.</li>
</ul>


<p>This seems to be the basic machinery useful in building CloudKit syncing. In <a href="https://developer.apple.com/videos/wwdc/2014/?id=231">Advanced CloudKit</a>, they also layout a recipe to follow when performing a sync:</p>

<ol>
<li>Track local changes</li>
<li>Send changes to the server</li>
<li>Resolve conflicts</li>
<li>Fetch server changes with <code>CKFetchRecordChangesOperation</code></li>
<li>Apply server changes</li>
<li>Save server change token</li>
</ol>


<p>One of the main strengths of CloudKit is how un-opinionated it is. As just a transport mechanism, it&rsquo;s very flexible in how you structure your application and architecture. What this means though is that there is a lot more left to figure out on your own. At this point in the journey, here are all the things I&rsquo;m left to figure out:</p>

<ul>
<li>How do I track local changes? Should I hook into sqlite and listen for all changes made to the tables I&rsquo;m syncing and create some sort of &ldquo;changes&rdquo; table. What does that table look like?</li>
<li>When do I perform a sync? At app launch? Every 60 seconds? Whenever anything changes? When the app is backgrounded?</li>
<li>What about when a record is deleted? I can&rsquo;t just delete it from the local database anymore? Maybe that can go into the &ldquo;changes&rdquo; database too?</li>
<li>How do I deal with conflict errors when sending modifications to the server? Actually, the fact that CloudKit is making me answer this question is great, I should be forced to figure this one out. Core Data syncing suffered because it hid too much of this from the programmer.</li>
<li>What if iCloud is down? Or the device has a bad connection? Or the server is busy? Or iCloud rate limits me? Or there is no iCloud account? Or the user switches iCloud accounts? Or I&rsquo;m sending too much data?</li>
<li>Since Qiktionary is already out, what kind of problems will I run into migrating people&rsquo;s data when they first open the app after Qiktionary w/syncing is released? What if Qiktionary tries to do the initial import on both a person&rsquo;s iPhone and iPad at the same time?</li>
<li>A whole other class of questions related to architecture and writing clean code. What&rsquo;s the best way to go about that?</li>
<li>Also, for Qiktionary, this all has to corresponding to a Game Center account. So the local games are all syncing to iCloud under a certain GC account. If the user switches to a different GC account, the games don&rsquo;t go along with them. This means they could be playing on multiple GC accounts on a single iCloud account. Question: How?</li>
<li>Zone Subscriptions are another concern. They aren&rsquo;t 100% necessary but they should help to answer at least half of the &ldquo;when do I sync&rdquo; question. But they come with their own questions, like: when do I ask the user for permission to send them push notifications for this purpose? Is it a little silly to say hey I need your permission for push notifications because: sync?</li>
<li>How do I do this all in a way that doesn&rsquo;t break other things, like duplicating games or lost games, overwriting games, scores, and achievements?</li>
</ul>


<p>Since I am a couple of days into this now, I think I have a couple of these questions nailed down (I&rsquo;ve even written some code so a few of those answers have survived that test), but many are still open questions, which I will trying to answer as this work (and this series) continues for the next couple of weeks.</p>

<p>Stay tuned for <a href="http://initwithfunk.com/blog/2015/06/29/ailcks-part-2-keeping-things-simple">Part 2</a>. Get notified of new posts by <a href="http://twitter.com/eallam">following me on Twitter</a>. In the meantime <a href="http://qiktionary.com">download Qiktionary</a> and learn some cool facts :).</p>
]]></content>
  </entry>
  
</feed>
