<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | initWithFunk:]]></title>
  <link href="http://initwithfunk.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://initwithfunk.com/"/>
  <updated>2013-05-27T12:39:03-04:00</updated>
  <id>http://initwithfunk.com/</id>
  <author>
    <name><![CDATA[Eric Allam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Announcing Try Objective-C]]></title>
    <link href="http://initwithfunk.com/blog/2013/05/09/try-objective-c-and-learning-to-code/"/>
    <updated>2013-05-09T13:36:00-04:00</updated>
    <id>http://initwithfunk.com/blog/2013/05/09/try-objective-c-and-learning-to-code</id>
    <content type="html"><![CDATA[<p><img src="https://d1ffx7ull4987f.cloudfront.net/images/achievements/large_badge/246/completed-try-objective-c-d2ebeb17d5acfd77df0bf3ae3d2b89f7.png" alt="Badge" /></p>

<p>Today we are releasing the free <a href="tryobjectivec.codeschool.com">Try Objective-C</a> course to our <a href="http://www.kickstarter.com/projects/eallam/try-ios-iphone-app-development-course">Kickstarter backers</a> and anyone else who wants to learn Objective-C, the language that powers iOS and Mac OS X apps.</p>

<p>When I first launched this Kickstarter project, I wasn&rsquo;t sure what kind of response we would get.  But after the first couple of days, it was clear that there were many, many people who wanted to learn how to build iOS apps. We were quickly met with a ton of requests for content for absolute beginners, people who had never coded before in their life but who desperately wanted to learn how to make iOS apps. I started work on an <a href="https://speakerdeck.com/rubymaverick/objective-c-primer-ft-mr-higgie">Objective-C Primer</a> to give beginners a chance at learning the language before starting on iOS.</p>

<p>But Objective-C is a pretty complex beast of a language. And so we made it a &ldquo;stretch&rdquo; goal of the project to produce a full blown, free, Objective-C course.</p>

<p>I didn&rsquo;t know what I&rsquo;d gotten us into.</p>

<p>Being experienced programmers, sometimes it&rsquo;s easy losing sight of how hard this stuff can be. We make too many assumptions and end up alienating a bunch of determined learners who feel like they aren&rsquo;t being told the whole story. The problem is, the story is HUGE. Especially for a language like Objective-C. It&rsquo;s an old language with a lot of power, but with that power comes a high level of complexity.  Luckily, recent advances of the language (like auto-synthesized properties, object literals, and most of all ARC) have brought that complexity down to a level where it has become much easier to learn.</p>

<p>The rise of the popularity and use of the App Store has resulted in an interested phenomena: tons of people are entering programming for the first time by trying to learn an incredibly hard language and framework.  We were reminded of this when we ran a private beta 4 weeks ago in our offices to help us with some feedback on the course and the content. We do private betas for all of our courses, and the beta for Try Objective-C had by far the most beginners of any beta we&rsquo;ve had.</p>

<p>And unfortunately at that point our content was failing the true beginner. So we started over. We rewrote the entire course. The course we are releasing today gives the true beginner a really good shot at actually learning this language. It&rsquo;s not perfect, and it&rsquo;s definitely not easy, but it&rsquo;s the most approachable course we could have written.  And even though someone with experience in programming will most definitely start down the path of learning Objective-C and iOS with this course, it was written with someone else in mind. It was written for my brother the T-shirt printer, for my fiancée the scientist, for my friend who is a single mom, for my neighbor with all the crazy app ideas, for my dentist, for my friends, and for all the people who messaged me on Kickstarter, wanting desperately to learn a new skill, to make something meaningful, to feel like they too could become a programmer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up KIF Integration Tests for iOS]]></title>
    <link href="http://initwithfunk.com/blog/2012/10/21/setting-up-kif-integration-tests-for-ios/"/>
    <updated>2012-10-21T12:03:00-04:00</updated>
    <id>http://initwithfunk.com/blog/2012/10/21/setting-up-kif-integration-tests-for-ios</id>
    <content type="html"><![CDATA[<p>Square released a pretty neat Integration Testing library called <a href="https://github.com/square/KIF">KIF</a> last year and we have been using it to test the challenges for our upcoming <a href="http://kickstarter.codeschool.com">Try iOS</a> course on <a href="http://www.codeschool.com/courses">Code School</a>.  The instructions in the KIF <a href="https://github.com/square/KIF/blob/master/README.md">README</a> on setting up an Xcode 4 project are missing a couple of crucial steps, and after much Googling and Stackoverflowing I finally figured out how to get it to work, so I figured I&rsquo;d share the process we are using for setting up KIF projects.</p>

<p>I&rsquo;m assuming you already have an Xcode 4 (version 4.5.1) project that you want to add KIF to. First, if you aren&rsquo;t already working with an Xcode workspace, you will need to create one for this project.  To do so, choose the &ldquo;Save as Workspace&rdquo; menu item:</p>

<p><img src="http://f.cl.ly/items/0j1A2b3Y132K2S2F0G1r/Resized%20Screen%202012-10-21%20at%2012.13.49%20PM.png" alt="image" /></p>

<p>You need a workspace so you can manage both your original project (in my example InstagramClone), and the KIF project we are about to add the the workspace. For more on workspaces check out <a href="http://developer.apple.com/library/ios/#featuredarticles/XcodeConcepts/Concept-Workspace.html">this Apple doc</a>.</p>

<p>Next, you&rsquo;ll want to download the KIF project from their <a href="https://github.com/square/KIF/downloads">downloads page</a>, and copy the files inside of a &ldquo;Frameworks&rdquo; directory under the Project Root.</p>

<p><img src="http://f.cl.ly/items/3Y1p0H471A381R2I0O43/Resized%20Screen%202012-10-21%20at%2012.19.56%20PM.png" alt="image" /></p>

<p>Next, go back to Xcode and command-click on empty area in the Project Navigator (⌘1), and choose &ldquo;Add Files to Project&rdquo;:</p>

<p><img src="http://f.cl.ly/items/1H37001a061B460V2o0b/Resized%20Screen%202012-10-21%20at%2012.21.08%20PM.png" alt="image" /></p>

<p>Navigate and select the &ldquo;KIF.xcodeproj&rdquo; file under Project Root->Frameworks->KIF.  Now the Project Navigator should look like you have two projects on equal footing:</p>

<p><img src="http://f.cl.ly/items/1t0222422N0u3H143f0q/Resized%20Screen%202012-10-21%20at%2012.27.00%20PM.png" alt="image" /></p>

<p>This is important, at this point it should not look like the &ldquo;KIF&rdquo; project is under the &ldquo;InstagramClone&rdquo; project.</p>

<p>Next, select your project in the Project Navigator and you should see information about Projects and Targetings in the main content area.  Command-click on your app target and choose &ldquo;Duplicate&rdquo;:</p>

<p><img src="http://f.cl.ly/items/392A1v290G1t152o1I41/Resized%20Screen%202012-10-21%20at%2012.31.19%20PM.png" alt="image" /></p>

<p>Then choose &ldquo;Duplicate Only&rdquo;:</p>

<p><img src="http://f.cl.ly/items/042Y0d1D2A2b1e2u1j3x/Resized%20Screen%202012-10-21%20at%2012.32.10%20PM.png" alt="image" /></p>

<p>You should see a new target named &ldquo;PROJECTNAME Copy&rdquo;. Select the target, press Enter, and change the name to something like &ldquo;Integration Tests&rdquo;:</p>

<p><img src="http://f.cl.ly/items/3C2g0m0l0k1p3C3h332k/Resized%20Screen%202012-10-21%20at%2012.33.52%20PM.png" alt="image" /></p>

<p>With the &ldquo;Integration Tests&rdquo; target selected, go to the &ldquo;Build Phases&rdquo; panel, expand the &ldquo;Link Binary With Libraries&rdquo; section, and click the little &ldquo;+&rdquo; button.  Select the &ldquo;libKif.a&rdquo; binary from the list and add it:</p>

<p><img src="http://f.cl.ly/items/3U462R3e0H2h2O091a3N/Resized%20Screen%202012-10-21%20at%2012.37.01%20PM.png" alt="image" /></p>

<p>Still with the &ldquo;Integration Tests&rdquo; target selected, go to the &ldquo;Build Settings&rdquo; panel.  Make sure you have &ldquo;All&rdquo; and &ldquo;Combined&rdquo; selected:</p>

<p><img src="http://f.cl.ly/items/0U02000V1U400O1W421u/Resized%20Screen%202012-10-21%20at%2012.41.54%20PM.png" alt="image" /></p>

<p>Search for the &ldquo;Header Search Paths&rdquo; and edit the setting to add <code>$(inherited)</code> and <code>$(SRCROOT)/Frameworks/KIF</code>, like so:</p>

<p><img src="http://f.cl.ly/items/3f1c1g0G3F2F0H0P2X1O/Resized%20Screen%202012-10-21%20at%2012.44.43%20PM.png" alt="image" /></p>

<p>Search for the &ldquo;Other Linker Flags&rdquo; setting and edit to add these flags:</p>

<p><img src="http://f.cl.ly/items/0j0g2H371P2I2M3S2y1k/Resized%20Screen%202012-10-21%20at%2012.47.12%20PM.png" alt="image" /></p>

<p>Next, add the <code>RUN_KIF_TESTS=1</code> Preprocessor Macro to both the &ldquo;Release&rdquo; and &ldquo;Debug&rdquo; targets, like so:</p>

<p><img src="http://f.cl.ly/items/3P2U1t1e3p1r272k1a0d/Resized%20Screen%202012-10-21%20at%2012.50.08%20PM.png" alt="image" /></p>

<p>Now that we&rsquo;ve configured the &ldquo;Integration Tests&rdquo; target correctly, we need to make sure that before Xcode builds the target, it also builds the KIF project.  To do this we need to do a couple of things (this is what you won&rsquo;t find in the instructions provided by Square).</p>

<p>First, we need to edit the &ldquo;PROJECTNAME Copy&rdquo; Xcode Scheme to tell it to build KIF.  To do that, go to &ldquo;Edit Schemes&rdquo; and select the &ldquo;PROJECTNAME Copy&rdquo; scheme.  Choose the &ldquo;Build&rdquo; phase.  You should see something like this:</p>

<p><img src="http://f.cl.ly/items/0F0q0G1H2L2d1P440u04/Resized%20Screen%202012-10-21%20at%2012.52.21%20PM.png" alt="image" /></p>

<p>Click on the little &ldquo;+&rdquo; button right above the &ldquo;Manage Schemes&rdquo; button, and Add the &ldquo;KIF&rdquo; target:</p>

<p><img src="http://f.cl.ly/items/3n2i2m260X2P442W050b/Resized%20Screen%202012-10-21%20at%2012.57.12%20PM.png" alt="image" /></p>

<p>Close the &ldquo;Edit Schemes&rdquo; dialog and go back to the Project Navigator.  Click and Drag the &ldquo;KIF&rdquo; project to under your App project.  In the dialog that appears, select both your app target and the &ldquo;Integration&rdquo; Tests target in the &ldquo;Add to targets&rdquo; section:</p>

<p><img src="http://f.cl.ly/items/1v2y1w3J2S3v151o1T0Y/Resized%20Screen%202012-10-21%20at%2012.59.29%20PM.png" alt="image" /></p>

<p>After clicking &ldquo;Finish&rdquo; your Project Navigator should look like this:</p>

<p><img src="http://f.cl.ly/items/0s3m3l0i0i2K0L2y3w1z/Resized%20Screen%202012-10-21%20at%2012.59.37%20PM.png" alt="image" />.</p>

<p>Now you should be able to follow the rest of Square&rsquo;s instructions for adding the Controller, Scenario, and Step files to test your app in the &ldquo;Example&rdquo; section of their <a href="https://github.com/square/KIF/blob/master/README.md">README</a></p>
]]></content>
  </entry>
  
</feed>
