<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AFNetworking | initWithFunk:]]></title>
  <link href="http://initwithfunk.com/blog/categories/afnetworking/atom.xml" rel="self"/>
  <link href="http://initwithfunk.com/"/>
  <updated>2014-03-14T17:39:03+00:00</updated>
  <id>http://initwithfunk.com/</id>
  <author>
    <name><![CDATA[Eric Allam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AFNetworking SSL Pinning with Self-Signed Certificates]]></title>
    <link href="http://initwithfunk.com/blog/2014/03/12/afnetworking-ssl-pinning-with-self-signed-certificates/"/>
    <updated>2014-03-12T14:13:00+00:00</updated>
    <id>http://initwithfunk.com/blog/2014/03/12/afnetworking-ssl-pinning-with-self-signed-certificates</id>
    <content type="html"><![CDATA[<p>Rob Napier&rsquo;s recent talk on <a href="http://renaissance.io/2014/sessions/get_security_and_privacy_right">iOS security</a> inspired me to implement certificate pinning for an iOS app I am working on<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. If you haven&rsquo;t heard of it before, there is a good introduction to the technique over at the <a href="https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning">Open Web Application Security Project</a>. The basic idea is that, if you control both the server and client that want to talk over https, there is no need to use third-party Certificate Authorities (of which there are <a href="http://support.apple.com/kb/ht5012">many</a> you explicitly trust without using pinning), because you already have knowledge of the certificate the server will use, so you can just take that server certificate and put it in your client. Then when the client wants to connect to the server it can just match the bundled certificate with the one from the server.</p>

<p>It&rsquo;s a fairly new idea that gained traction back in 2011 when <a href="https://www.imperialviolet.org/2011/05/04/pinning.html">Chrome implemented pinning for google.com</a> which allowed it to expose a man-in-the-middle attack caused by a <a href="http://googleonlinesecurity.blogspot.co.uk/2011/08/update-on-attempted-man-in-middle.html">fraudulent SSL certificate issued by the CA DigiNotar</a>.</p>

<p><a href="https://github.com/AFNetworking/AFNetworking/releases/tag/2.2.0">AFNetworking 2.2.0</a> was recently released with updates to it&rsquo;s SSL Pinning abilities. Unfortunately, the documentation for implementing pinning is confusing/non-existent, especially when it comes to self-signed certificates (include some stuff that is just broken). The following is how I was able to implement certificate pinning with self-signed certificates in my app with AFNetworking 2.2.</p>

<h3>The self-signed certificate question</h3>

<p>The first problem I ran into is whether or not I should use a self-signed certificate, instead of a certificate issued by a third-party authority such as Verisign<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. I chose to go the route of a self-signed certificate, because I wanted to pin my app to my own self-signed Certificate Authority (CA)<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. This means that my app will connect to any server that uses certificates issued by my self-signed CA. This is safer then pinning to a specific certificate because I didn&rsquo;t want to worry about updating clients for expiring certificates. This is  Rob Napier&rsquo;s advice from his <a href="http://renaissance.io/2014/sessions/get_security_and_privacy_right">talk</a> mentioned above.</p>

<p><span style='font-size: 0.8em;'><strong>Note</strong>: If your server is also going to be used as a public facing website (and not just an API server like the one I am building), and want to serve content over HTTPS, you are going to need to go the third-party CA route, since if you serve a self-signed cert to a browser, the user will end up just seeing a distressing message about a bum certificate.</span></p>

<h3>Create the CA and certs</h3>

<p>Apple has a <a href="https://developer.apple.com/library/ios/technotes/tn2326/_index.html#//apple_ref/doc/uid/DTS40014136-CH1-SECISSUE_C">great technical note</a> for creating self-signed CA&rsquo;s and certs. It&rsquo;s ostensibly about doing this for testing purposes, but it should work just fine for production apps using pinning. I followed the directions in the technical note exactly you and ended up with all the certs I needed for implementing pinning.</p>

<h3>Configuring the Server</h3>

<p>After I created the appropriate certs, I needed to setup my server for SSL. I&rsquo;m using nginx and it&rsquo;s fairly straightforward to setup. I uploaded the exported self-signed certificate (the &ldquo;p12&rdquo; file) to the <code>/etc/nginx/ssl</code> directory on my server using scp:</p>

<p><code>
$ scp ServerCertificate.p12 user@myserver.com:/etc/nginx/ssl
</code></p>

<p><span style='font-size: 0.8em;'><strong>Note:</strong> Make sure to upload the p12 file to the server before extracting the private key and certificate so your private key stays safe during transit.</span></p>

<p>Next, I extracted the server certificate&rsquo;s private key and cert (entering the password I set during export):</p>

<p><code>
user@myserver.com: $ openssl pkcs12 -in ServerCertificate.p12 -nokeys -out server.crt
user@myserver.com: $ openssl pkcs12 -in ServerCertificate.p12 -nocerts -nodes -out server.key
</code></p>

<p>Now I had two files on my server, <code>/etc/nginx/ssl/server.crt</code> and <code>/etc/nginx/ssl/server.key</code>. I updated my nginx config (usually found at <code>/etc/nginx/nginx.conf</code>) to flip on ssl for my server:</p>

<p>```
 server {</p>

<pre><code>listen 443;
server_name myserver.com;
root /path/to/my/root;
ssl on;
ssl_certificate /etc/nginx/ssl/server.crt;
ssl_certificate_key /etc/nginx/ssl/server.key;
</code></pre>

<p>}
```</p>

<p><span style='font-size: 0.8em;'><strong>Note:</strong> You don&rsquo;t need to have the CA root certificate on the server, or concatenate the CA root cert with the server.crt file or anything like that. I spent too much time working under that assumption and took a couple of wrong turns before realizing it wasn&rsquo;t necessary.</span></p>

<p>After restarting nginx I made sure it was working by downloading the server&rsquo;s certificate using <code>openssl</code>, like so:</p>

<p><code>
$ openssl s_client -connect myserver.com:443
</code></p>

<p>This printed a bunch of information about the SSL certificate for myserver.com. The output had &ldquo;Verify return code: 21 (unable to verify the first certificate)&rdquo;. This just means that openssl couldn&rsquo;t verify the root certificate (since it doesn&rsquo;t know anything about my self-signed CA cert). When I passed in my CA certificate  the SSL handshake resulted in &ldquo;Verify return code: 0 (ok)&rdquo;:</p>

<p><code>
$ openssl s_client -connect myserver.com:443 -CAfile ./MyCACertificate.pem
</code></p>

<p><span style='font-size: 0.8em;'><strong>Note:</strong> openssl expects the CA cert to be in PEM format. Convert it to PEM using <code>openssl x509 -inform DER -in MyCACertificate.cer -out MyCACertificate.pem</code></span></p>

<h3>Pinning the app with AFNetworking 2.2</h3>

<p>Pinning to a self-signed CA with AFNetworking 2.2 <a href="https://github.com/AFNetworking/AFNetworking/issues/1852">is broken</a>. Host-name validation<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> is also a mess, and expects your server certificate to have a Common Name that matches the host, even though using Common Name is <a href="https://github.com/AFNetworking/AFNetworking/issues/1891">not really the correct way to do host-name checking</a>. It also requires you to set the <code>allowInvalidCertificates</code> property on your security policy to <code>YES</code>, which entirely skips <a href="https://developer.apple.com/library/ios/documentation/Security/Reference/certifkeytrustservices/Reference/reference.html#//apple_ref/c/func/SecTrustEvaluate">iOS&rsquo;s built-in way</a> for verifying certificates based on <a href="ftp://ftp.isi.edu/in-notes/rfc2818.txt">RFC 2818</a>.</p>

<p>It instead requires you to have the entire certificate chain<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> in your app, or just the server cert<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>, but I just want to pin my app to the CA root cert.</p>

<p>It turns out that Rob Napier has already <a href="http://robnapier.net/pinning-your-ssl-certs/">implemented this exact type of pinning</a> in the standalone library <a href="https://github.com/rnapier/RNPinnedCertValidator">RNPinnedCertValidator</a>. It works by modifying the &ldquo;server trust&rdquo; object to only check against the anchor<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup> certificates pinned in the app. Everything else about the certificate verification stays the same<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>.</p>

<p>It&rsquo;s a pretty simple bit of code, so I created a subclass of <code>AFSecurityPolicy</code> and overrode the <code>evaluateServerTrust:forDomain:</code> method:</p>

<p>```objc</p>

<h1>import &ldquo;STPSecurityPolicy.h&rdquo;</h1>

<h1>import &lt;Security/Security.h></h1>

<p>static NSArray <em>STPTrustedCertificates(NSArray </em>certs){</p>

<pre><code>NSMutableArray *secCerts = [NSMutableArray arrayWithCapacity:certs.count];

for (NSData *certData in certs) {
    SecCertificateRef certRef = SecCertificateCreateWithData(NULL, (__bridge CFDataRef)(certData));

    [secCerts addObject:CFBridgingRelease(certRef)];
}

return [secCerts copy];
</code></pre>

<p>}</p>

<p>@implementation STPSecurityPolicy</p>

<ul>
<li><p>(BOOL)evaluateServerTrust:(SecTrustRef)serverTrust forDomain:(NSString *)domain
{
  SecTrustSetAnchorCertificates(serverTrust, (__bridge CFArrayRef)STPTrustedCertificates(self.pinnedCertificates));</p>

<p>  SecTrustResultType result;
  OSStatus status = SecTrustEvaluate(serverTrust, &amp;result);</p>

<p>  if (status == errSecSuccess &amp;&amp;
      (result == kSecTrustResultProceed ||
       result == kSecTrustResultUnspecified)) {</p>

<pre><code>      return YES;
  }
</code></pre>

<p>  else {
      return NO;
  }
}</p></li>
</ul>


<p>@end
```</p>

<p>The <code>STPTrustedCertificates</code> function just converts the <code>pinnedCertificates</code> array into an array of <code>SecCertificateCreateWithData</code> objects (to conform to what <code>SecTrustSetAnchorCertificates</code> expects). <code>SecTrustSetAnchorCertificates</code> is the Security.h function that modifies the <code>serverTrust</code> to only trust the certs passed in. From <a href="https://developer.apple.com/library/ios/documentation/Security/Reference/certifkeytrustservices/Reference/reference.html#//apple_ref/c/func/SecTrustSetAnchorCertificates">the docs</a>:</p>

<p><span style='font-size: 0.8em;'>When you call the SecTrustSetAnchorCertificates function, you are effectively telling the SecTrustEvaluate function to use the anchor certificates in the specified array to evaluate trust regardless of any user-specified trust settings for those certificates. Furthermore, any intermediate certificates based on those anchor certificates are also trusted without consulting user trust settings.</span></p>

<p>Then I delegate to <code>SecTrustEvaluate</code> to make sure the server&rsquo;s cert is valid. If the result is either &ldquo;proceed&rdquo; or &ldquo;unspecified&rdquo;, then return YES, otherwise return NO<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>.</p>

<p>To use this subclass, I just set an instance of it as the <code>securityPolicy</code> of my <code>AFHTTPSessionManager</code> subclass, like so:</p>

<p>```objc
client = [[STPAPIClient alloc] initWithBaseURL:baseURL sessionConfiguration:configuration];
client.securityPolicy = [STPSecurityPolicy defaultPolicy];</p>

<p>NSString <em>caCertificatePath = [[NSBundle mainBundle] pathForResource:@&ldquo;MyCA&rdquo; ofType:@&ldquo;der&rdquo;];
NSData </em>caCertificate = [NSData dataWithContentsOfFile:caCertificatePath];</p>

<p>client.securityPolicy.pinnedCertificates = @[caCertificate];
```</p>

<p>As you can see I&rsquo;m setting the pinned certificates explicitely to just the CA root certificate, which means that the certificate has been added to the project. The cert has to be in the &ldquo;DER&rdquo; format (Keychain Access exports certificates in this format). If it&rsquo;s in &ldquo;PEM&rdquo;, then convert it to DER before adding to your project using <code>openssl</code>, like so:</p>

<p><code>
$ openssl x509 -in MyCA.pem -outform der -out MyCA.der
</code></p>

<p>After doing this and adding <code>MyCA.der</code> to the project, the certificate pinning worked!</p>

<h3>Thoughts, Questions, Concerns, and Confusion</h3>

<ul>
<li><p>I don&rsquo;t like hacking AFNetworking in this way, and would like to work together with the maintainers to get both better documentation and a better implementation for this scenario. But it&rsquo;s a credit to the API design of AFNetworking that this was so easy to change.</p></li>
<li><p>If I wasn&rsquo;t using AFNetworking then I would just use <a href="https://github.com/rnapier/RNPinnedCertValidator">RNPinnedCertValidator</a>, leaving everything else the same.</p></li>
<li><p>This is making me paranoid about my server&rsquo;s private keys and my own computer&rsquo;s security. I know just enough to be dangerous. This whole week-long investigation makes me appreciate the hell out of people who do sysops.</p></li>
<li><p>How does everyone else do pinning? Also, what&rsquo;s the difference between certificate and public key pinning? Is one better than the other? Why are there two different ways to do this?</p></li>
<li><p>The <a href="https://developer.apple.com/library/ios/documentation/Security/Reference/certifkeytrustservices/Reference/reference.html#//apple_ref/c/func/SecTrustSetAnchorCertificates">iOS Security APIs</a> are WAY behind of <a href="https://developer.apple.com/library/mac/documentation/security/Reference/certifkeytrustservices/Reference/reference.html">OS X&rsquo;s</a>. I&rsquo;m guessing most of the discrepency is because on iOS you are supposed to fail if cert trust can&rsquo;t be established, where on OS X you are given a chance to recover from failure by showing the user a dialog that allows them to set explicit trust. Although the <a href="https://developer.apple.com/library/mac/documentation/security/Reference/certifkeytrustservices/Reference/reference.html#//apple_ref/c/func/SecTrustGetTrustResult"><code>SecTrustGetTrustResult</code></a> function on OS X doesn&rsquo;t do at all what the doc suggests. It returns the same exact set of constants that <code>SecTrustEvaluate</code> returns, even though the docs suggest it should return actual reasons why <code>SecTrustEvaluate</code> failed. It&rsquo;s not at all a replacement for the deprecated <code>SecTrustGetResult</code>. As of 10.9 there is no non-deprecated way to recover from <code>kSecTrustResultRecoverableTrustFailure</code>. Time to fail some radars.</p></li>
<li><p>Protecting against MITM needs to be much easier than this. It&rsquo;s too easy to leak data between an app and a server. Setting up SSL should be easier than this.</p></li>
<li><p>It&rsquo;s also possible that I&rsquo;m just a dummy and it IS easy for everyone else, which is something I suspect to be true.</p></li>
<li><p>Almost every single <a href="https://www.digitalocean.com/community/articles/how-to-create-a-ssl-certificate-on-nginx-for-ubuntu-12-04">tutorial</a> I read on generating self-signed certs recommend that you put your server&rsquo;s hostname in the Common Name field, even though the <a href="ftp://ftp.isi.edu/in-notes/rfc2818.txt">HTTPS RFC</a> clearly states that you should use the subjectAltName extension for hostname checking (only old ssl clients use the Common Name for hostname checking).</p></li>
</ul>


<p>Let me know if I got anything wrong by messaging me <a href="http://twitter.com/eallam">on twitter</a>. I am afterall a <a href="http://edgecasesshow.com/061-a-cryptography-tourist.html">cryptography tourist</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>That story coming soon.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>You don&rsquo;t need to use a self-signed certificate to get the benefits of pinning. Pinning works just as well with pinning to a cert issued by a third party, although you might run into problems when the certificate expires.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Just like you can create your own certificates, you can create your own certificate authorities, and then use that certificate authority to issue server certificates.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Host-name validation just ensures that the server you are attempting to (e.g. myserver.com) is serving a certificate for myserver.com and not some other host.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>In my case, that would be both the server certificate and the CA root certificate. It&rsquo;s possible to have a larger chain though. A common setup is to have an intermediate certificate between the CA and the server cert. So in that case you&rsquo;d need all three certificates in the app.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>Also known as the &ldquo;leaf&rdquo; or &ldquo;End-Entity&rdquo; certificate. See <a href="https://github.com/AFNetworking/AFNetworking/issues/1852#issuecomment-36199389">this comment</a> for more on why this is bad.<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>The &ldquo;Anchor&rdquo; cert is the one that issued the server certificate. It could be a root CA cert, or an intermediate cert.<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
<li id="fn:8">
<p>Including host-name checking. You can see for yourself which SSL policies a server trust object implements using <a href="https://developer.apple.com/library/ios/documentation/Security/Reference/certifkeytrustservices/Reference/reference.html#//apple_ref/c/func/SecTrustCopyPolicies"><code>SecTrustCopyPolicies</code></a><a href="#fnref:8" rev="footnote">&#8617;</a></p></li>
<li id="fn:9">
<p>Credit for this code goes to Rob Napier and is under his [MIT License][18].<a href="#fnref:9" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
